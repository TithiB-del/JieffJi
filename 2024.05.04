class GfG
{
    //Function to return a tree created from postorder and inoreder traversals.
    int preIndex;
    HashMap<Integer,Integer> h=new HashMap<>();
    Node buildTree(int in[], int post[], int n) {
        // Your code here
        for(int i=0;i<in.length;i++){
            h.put(in[i],i);
        }
        preIndex=n-1;
        return cTree(in,post,0,n-1);
    }
    public Node cTree(int in[],int pre[],int is,int ie){
        if(is>ie)return null;
        Node root=new Node(pre[preIndex--]);
        
        int inIndex=is;
        inIndex= h.get(root.data);
        root.right=cTree(in, pre, inIndex+1, ie);
        root.left=cTree(in, pre, is, inIndex-1);
       
        return root;
    }
    
    
}
